Graph => A graph is a data structure used to represent a collection of objects (called vertices or nodes) and the connections (called edges) between them. Graphs are widely used to model real-world problems such as social networks, computer networks, road maps, and many more.

Types of Graphs: 
    1. Directed Graph (Digraph):
        > Each edge has a direction, meaning the connection is one-way.
        > Example: Twitter follow relationship (user A follows user B, but B may not follow A).

    2. Undirected Graph:
        > Edges have no direction, meaning the connection between nodes is bidirectional.
        > Example: Facebook friends (if user A is friends with user B, user B is also friends with user A).

    3. Weighted Graph:
        > Each edge has a weight (a numerical value), which could represent things like distance, cost, or time.
        > Example: A road map where edges represent roads and weights represent distances.
    
    4. Unweighted Graph:
        > Edges have no weights and simply represent connections.
        > Example: A social network with connections between friends.

    5. Cyclic Graph: 
        > A graph that contains at least one cycle (a path that starts and ends at the same node).
        
    6. Acyclic Graph: 
        >  graph with no cycles. If it's directed, itâ€™s called a Directed Acyclic Graph (DAG).

Common Graph Methods (Operations)
    1. Add Vertex - O(1)
    2. Add Edge -  O(1)
    3. Remove Vertex O(E) E-number of edge
    4. Remove Edge - O(V + E) V -Number of vertex , E-number of edge
    5. Depth First Search (DFS): O(V + E)
        > Starts at a node and explores as far as possible along each branch before backtracking.
    6. Breadth First Search (BFS): O(V + E)
        > Starts at a node and explores all of its neighbors at the present depth before moving on to nodes at the next depth level.
    7. Check if two vertices are connected: O(E)
    8. Shortest Path: 
        > Finds the shortest path between two nodes. Algorithms like Dijkstra's or Bellman-Ford are used to compute this.
    9. Cycle Detection

Graph Representation in JavaScript
    1. Adjacency Matrix
    2. Adjacency List



1. DFS (Depth First Search)
   > Depth First Search explores as far as possible along a branch before backtracking, which means it dives deep into the graph, exploring each branch of a node until there are no more children, then backtracks to explore other branches. DFS can be implemented using both recursion and iteration (using a stack).

Steps for DFS:
    > Start from a node.
    > Mark the node as visited.
    > Visit each neighbor of the node, recursively or by pushing the unvisited neighbors onto a stack.
    > If a node has no more unvisited neighbors, backtrack.


BFS (Breadth First Search)
    > Breadth First Search explores all neighbors of a node level by level, meaning it visits all the neighbors of the starting node, then moves on to the next level of neighbors. BFS uses a queue to ensure nodes are processed in the order they were discovered.

Steps for BFS:
    > Start from a node.
    > Mark the node as visited.
    > Visit all the neighbors of the node and enqueue them if they haven't been visited.
    > Dequeue the first element and repeat the process for its neighbors.